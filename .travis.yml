language: cpp
dist: trusty

# Fix Travis write errors on Clang builds. These write errors occurred after
# a Travis update to new Trusty images on Dec. 12th 2017. The reason for these
# write errors is unknown. Using the deprecated builds did not fix the problem.
# Setting 'filter_secrets: false' as suggested here
# https://github.com/travis-ci/travis-ci/issues/4704#issuecomment-321777557
# fixes the problem.
filter_secrets: false

#limit to git depth to 1 because don't use any git command in this script
git:
  depth: 1
  
before_install:
# TODO test
- sudo apt-get --assume-yes install curl
- curl --version
- ls > test.txt
- cat test.txt
- curl --disable-epsv --ftp-create-dirs -T test.txt -u ${FTP_USER}:${FTP_PASSWORD} ${YADOMS_UPLOAD_URL}/
#g++ arm-linux-gnueabihf 
- echo 'Installing arm-linux-gnueabihf cross toolchain'
- git clone --depth=1 git://github.com/raspberrypi/tools.git
- export PATH=$PATH:$PWD/tools/arm-bcm2708/arm-rpi-4.9.3-linux-gnueabihf/bin

# deps
- mkdir -p $HOME/depsBuild
- mkdir -p $HOME/logs

#CMake
- echo 'Installing CMake 3.10.2'
- if [ ${GENERATE_CMAKE} != true ]; then wget --no-verbose -U 'Yadoms/1.0.0' ${YADOMS_DOWNLOAD_URL}/yadoms-build-raspberrypi/cmake-3.10.2-build.tar.bz2; else wget --no-verbose --no-check-certificate https://cmake.org/files/v3.10/cmake-3.10.2.tar.gz; fi
- if [ ${GENERATE_CMAKE} != true ]; then tar jxf cmake-3.10.2-build.tar.bz2; else tar zxf cmake-3.10.2.tar.gz; fi
- cd cmake-3.10.2
- if [ ${GENERATE_CMAKE} != true ]; then echo "Bypass CMake/bootstrap" ; else ./bootstrap; fi
- if [ ${GENERATE_CMAKE} != true ]; then echo "Bypass CMake/make"; else make; fi
- sudo make install
- cd ..
- if [ ${GENERATE_CMAKE} = true ]; then tar cjf cmake-3.10.2-build.tar.bz2 cmake-3.10.2; fi
# TODO test
- ls > test.txt
- cat test.txt
- curl --disable-epsv --ftp-create-dirs -T test.txt -u ${FTP_USER}:${FTP_PASSWORD} ${YADOMS_UPLOAD_URL}/
# END TODO test
- if [ ${GENERATE_CMAKE} = true ]; then curl --disable-epsv --ftp-create-dirs -T cmake-3.10.2-build.tar.bz2 -u ${FTP_USER}:${FTP_PASSWORD} ${YADOMS_UPLOAD_URL}/ ; fi
- if [ ${GENERATE_CMAKE} = true ]; then rm -f cmake-3.10.2-build.tar.bz2; fi

# boost
- echo 'Building Boost 1.65.1'
- if [ ${GENERATE_BOOST} != true ]; then wget -U 'Yadoms/1.0.0' ${YADOMS_DOWNLOAD_URL}/boost_1_65_1-build.tar.bz2; else wget http://netcologne.dl.sourceforge.net/project/boost/boost/1.65.1/boost_1_65_1.tar.bz2; fi
- if [ ${GENERATE_BOOST} != true ]; then tar xjf boost_1_65_1-build.tar.bz2; else tar xjf boost_1_65_1.tar.bz2; fi
- cd boost_1_65_1
- if [ ${GENERATE_BOOST} != true ]; then echo "Bypass boost/bootstrap"; else ./bootstrap.sh > $HOME/logs/yadoms_boost.log; fi
- if [ ${GENERATE_BOOST} != true ]; then echo "Bypass boost/config"; else wget -U 'Yadoms/1.0.0' ${YADOMS_DOWNLOAD_URL}/user-config.txt -O $HOME/user-config.jam; fi
- if [ ${GENERATE_BOOST} != true ]; then echo "Bypass boost/b2"; else ./b2 --with-atomic --with-chrono --with-date_time --with-filesystem --with-regex --with-serialization --with-thread --with-system --no-samples --no-tests toolset=gcc-arm link=static cxxflags=-fPIC > $HOME/logs/yadoms_boost.log; fi
- cd ..
- if [ ${GENERATE_BOOST} = true ]; then tar cjf boost_1_65_1-build.tar.bz2 boost_1_65_1; fi
- if [ ${GENERATE_BOOST} = true ]; then curl --disable-epsv --ftp-create-dirs -T boost_1_65_1-build.tar.bz2 -u ${FTP_USER}:${FTP_PASSWORD} ${YADOMS_UPLOAD_URL}/; fi
- if [ ${GENERATE_BOOST} = true ]; then rm -f boost_1_65_1-build.tar.bz2; fi
  
 # openssl
- echo 'Building OpenSSL'
- if [ ${GENERATE_OPENSSL} != true ]; then wget --no-verbose -U 'Yadoms/1.0.0' ${YADOMS_DOWNLOAD_URL}/openssl-1.1.0g-build.tar.bz2; else wget --no-verbose https://www.openssl.org/source/openssl-1.1.0g.tar.gz; fi
- if [ ${GENERATE_OPENSSL} != true ]; then tar xjf openssl-1.1.0g-build.tar.bz2; else tar xzf openssl-1.1.0g.tar.gz; fi
- cd openssl-1.1.0g
- if [ ${GENERATE_OPENSSL} != true ]; then echo "Bypass OpenSSL/configure"; else ./Configure --prefix=$HOME/depsBuild/openssl os/compiler:arm-linux-gnueabihf > $HOME/logs/yadoms_openssl.log; fi
- if [ ${GENERATE_OPENSSL} != true ]; then echo "Bypass OpenSSL/make"; else make CC="arm-linux-gnueabihf-gcc" AR="arm-linux-gnueabihf-ar r" RANLIB="arm-linux-gnueabihf-ranlib" > $HOME/logs/yadoms_openssl.log; fi
- make install > $HOME/logs/yadoms_openssl.log
- cd ..
- if [ ${GENERATE_OPENSSL} = true ]; then tar cjf openssl-1.1.0g-build.tar.bz2 openssl-1.1.0g; fi
- if [ ${GENERATE_OPENSSL} = true ]; then curl --disable-epsv --ftp-create-dirs -T openssl-1.1.0g-build.tar.bz2 -u ${FTP_USER}:${FTP_PASSWORD} ${YADOMS_UPLOAD_URL}/; fi
- if [ ${GENERATE_OPENSSL} = true ]; then rm -f openssl-1.1.0g-build.tar.bz2; fi

# poco
- echo 'Building Poco 1.8.1-all'
- if [ ${GENERATE_POCO} != true ]; then wget -U 'Yadoms/1.0.0' ${YADOMS_DOWNLOAD_URL}/poco-1.8.1-all-build.tar.bz2; else wget http://pocoproject.org/releases/poco-1.8.1/poco-1.8.1-all.tar.gz; fi
- if [ ${GENERATE_POCO} != true ]; then tar xjf poco-1.8.1-all-build.tar.bz2; else tar xzf poco-1.8.1-all.tar.gz; fi
- sudo apt-get install libssl-dev libgnutls-dev libopencv-gpu-dev > $HOME/logs/yadoms_poco.log
- cd poco-1.8.1-all/
- if [ ${GENERATE_POCO} != true ]; then echo "Bypass poco/configure_config_file"; else echo 'TOOL               = arm-linux-gnueabihf' > build/config/RaspberryPI; fi
- if [ ${GENERATE_POCO} != true ]; then echo "Bypass poco/copy_config_file"; else cat build/config/ARM-Linux >> build/config/RaspberryPI; fi
- if [ ${GENERATE_POCO} != true ]; then echo "Bypass poco/configure_config_file"; else echo 'STATICOPT_CC = -fPIC' >> build/config/RaspberryPI; fi
- if [ ${GENERATE_POCO} != true ]; then echo "Bypass poco/configure_config_file"; else echo 'STATICOPT_CXX = -fPIC' >> build/config/RaspberryPI; fi
- if [ ${GENERATE_POCO} != true ]; then echo "Bypass poco/configure"; else ./configure --static --config=RaspberryPI --no-samples --no-tests --omit=CppUnit,CppUnit/WinTestRunner,Data,Data/SQLite,Data/ODBCData/MySQL,MongoDB,PageCompiler,PageCompiler/File2Page --include-path=$HOME/depsBuild/openssl/include --library-path=$HOME/depsBuild/openssl/lib> $HOME/logs/yadoms_poco.log; fi
- if [ ${GENERATE_POCO} != true ]; then echo "Bypass poco/make"; else make > $HOME/logs/yadoms_poco.log; fi
- cd ..
- if [ ${GENERATE_POCO} = true ]; then tar cjf poco-1.8.1-all-build.tar.bz2 poco-1.8.1-all; fi
- if [ ${GENERATE_POCO} = true ]; then curl --disable-epsv --ftp-create-dirs -T poco-1.8.1-all-build.tar.bz2 -u ${FTP_USER}:${FTP_PASSWORD} ${YADOMS_UPLOAD_URL}/; fi
- if [ ${GENERATE_POCO} = true ]; then rm -f poco-1.8.1-all-build.tar.bz2; fi


# protobuf (host)
- echo 'Building Protobuf 3.4.1 HOST '
- sudo apt-get install autoconf libtool
- if [ ${GENERATE_PROTOBUF_HOST} != true ]; then wget -U 'Yadoms/1.0.0' ${YADOMS_DOWNLOAD_URL}/protobuf-3.4.1-host-build.tar.bz2; else wget https://github.com/google/protobuf/releases/download/v3.4.1/protobuf-cpp-3.4.1.tar.gz; fi
- if [ ${GENERATE_PROTOBUF_HOST} != true ]; then tar xjf protobuf-3.4.1-host-build.tar.bz2; else tar xzf protobuf-cpp-3.4.1.tar.gz; fi
- if [ ${GENERATE_PROTOBUF_HOST} != true ]; then echo "Bypass protobuf/mv dir"; else mv protobuf-3.4.1 protobuf-3.4.1-host; fi
- cd protobuf-3.4.1-host
- if [ ${GENERATE_PROTOBUF_HOST} != true ]; then echo "Bypass protobuf/mkdir build"; else mkdir build > $HOME/logs/yadoms_protobuf_host.log; fi
- cd build
- if [ ${GENERATE_PROTOBUF_HOST} != true ]; then echo "Bypass protobuf/cmake -Dprotobuf_BUILD_TESTS=OFF ../cmake"; else cmake -Dprotobuf_BUILD_TESTS=OFF ../cmake > $HOME/logs/yadoms_protobuf_host.log; fi
- if [ ${GENERATE_PROTOBUF_HOST} != true ]; then echo "Bypass protobuf/cmake -Dprotobuf_BUILD_TESTS=OFF --build ."; else cmake -Dprotobuf_BUILD_TESTS=OFF --build . > $HOME/logs/yadoms_protobuf_host.log; fi
- sudo make install > $HOME/logs/yadoms_protobuf_host.log
- sudo ldconfig
- cd ..
- cd ..
- if [ ${GENERATE_PROTOBUF_HOST} = true ]; then tar cjf protobuf-3.4.1-host-build.tar.bz2 protobuf-3.4.1-host; fi
- if [ ${GENERATE_PROTOBUF_HOST} = true ]; then curl --disable-epsv --ftp-create-dirs -T protobuf-3.4.1-host-build.tar.bz2 -u ${FTP_USER}:${FTP_PASSWORD} ${YADOMS_UPLOAD_URL}/; fi
- if [ ${GENERATE_PROTOBUF_HOST} = true ]; then rm -f protobuf-3.4.1-host-build.tar.bz2; fi

# protobuf (pi)
- echo 'Building Protobuf 3.4.1 PI'
- if [ ${GENERATE_PROTOBUF} != true ]; then wget -U 'Yadoms/1.0.0' ${YADOMS_DOWNLOAD_URL}/protobuf-3.4.1-build-pi.tar.bz2; else wget https://github.com/google/protobuf/releases/download/v3.4.1/protobuf-cpp-3.4.1.tar.gz; fi
- if [ ${GENERATE_PROTOBUF} != true ]; then tar xjf protobuf-3.4.1-build-pi.tar.bz2 -C $HOME/depsBuild; else tar xzf protobuf-cpp-3.4.1.tar.gz; fi
- if [ ${GENERATE_PROTOBUF} != true ]; then echo "Bypass protobuf/cd"; else cd protobuf-3.4.1; fi
- if [ ${GENERATE_PROTOBUF} != true ]; then echo "Bypass protobuf/autogen"; else ./autogen.sh > $HOME/logs/yadoms_protobuf_pi.log; fi
- if [ ${GENERATE_PROTOBUF} != true ]; then echo "Bypass protobuf/configure"; else ./configure --enable-shared=no --host=arm-linux CC=arm-linux-gnueabihf-gcc CXX=arm-linux-gnueabihf-g++ AR=arm-linux-gnueabihf-ar STRIP=arm-linux-gnueabihf-strip RANLIB=arm-linux-gnueabihf-ranlib --prefix=$HOME/depsBuild/protobuf --with-protoc=protoc --with-pic > $HOME/logs/yadoms_protobuf_pi.log; fi
- if [ ${GENERATE_PROTOBUF} != true ]; then echo "Bypass protobuf/make"; else make > $HOME/logs/yadoms_protobuf_pi.log; fi
- if [ ${GENERATE_PROTOBUF} != true ]; then echo "Bypass protobuf/make install"; else make install > $HOME/logs/yadoms_protobuf_pi.log; fi
- if [ ${GENERATE_PROTOBUF} != true ]; then echo "Bypass protobuf/cd.."; else cd ..; fi
- if [ ${GENERATE_PROTOBUF} = true ]; then tar cjf protobuf-3.4.1-build-pi.tar.bz2 -C $HOME/depsBuild protobuf; fi
- if [ ${GENERATE_PROTOBUF} = true ]; then curl --disable-epsv --ftp-create-dirs -T protobuf-3.4.1-build-pi.tar.bz2 -u ${FTP_USER}:${FTP_PASSWORD} ${YADOMS_UPLOAD_URL}/; fi
- if [ ${GENERATE_PROTOBUF} = true ]; then rm -f protobuf-3.4.1-build-pi.tar.bz2; fi


# pcre
# - echo 'Building PCRE'
# - if [ ${GENERATE_PCRE} != true ]; then wget -U 'Yadoms/1.0.0' ${YADOMS_DOWNLOAD_URL}/pcre-8.40-build.tar.bz2; else wget https://ftp.pcre.org/pub/pcre/pcre-8.40.tar.gz; fi
# - if [ ${GENERATE_PCRE} != true ]; then tar xjf pcre-8.40-build.tar.bz2; else tar xzf pcre-8.40.tar.gz; fi
# - cd pcre-8.40
# - if [ ${GENERATE_PCRE} != true ]; then echo "Bypass PCRE/configure"; else ./configure --host=arm-linux-gnueabihf CC=arm-linux-gnueabihf-gcc CXX=arm-linux-gnueabihf-g++ AR=arm-linux-gnueabihf-ar STRIP=arm-linux-gnueabihf-strip RANLIB=arm-linux-gnueabihf-ranlib --prefix=$HOME/depsBuild/pcre > $HOME/logs/yadoms_pcre.log; fi
# - if [ ${GENERATE_PCRE} != true ]; then echo "Bypass PCRE/make"; else make > $HOME/logs/yadoms_pcre.log; fi
# - make install > $HOME/logs/yadoms_pcre.log
# - cd ..
# - if [ ${GENERATE_PCRE} = true ]; then tar cjf pcre-8.40-build.tar.bz2 pcre-8.40; fi
# - if [ ${GENERATE_PCRE} = true ]; then curl --disable-epsv --ftp-create-dirs -T pcre-8.40-build.tar.bz2 -u ${FTP_USER}:${FTP_PASSWORD} ${YADOMS_UPLOAD_URL}/; fi
# - if [ ${GENERATE_PCRE} = true ]; then rm -f pcre-8.40-build.tar.bz2; fi

#libudev
- echo 'Get libudev from yadoms.com'
- wget -U 'Yadoms/1.0.0' ${YADOMS_DOWNLOAD_URL}/libudev.tar.gz
- tar xzf libudev.tar.gz -C $HOME/depsBuild

#gammu
# - echo 'Building Gammu 1.36.8'
# - wget http://dl.cihar.com/gammu/releases/gammu-1.36.8.tar.gz
# - tar zxf gammu-1.36.8.tar.gz
# - cd gammu-1.36.8
# - mkdir build
# - cd build
# - cmake .. -DBUILD_SHARED_LIBS=ON > yadoms_gammu.log
# - make > yadoms_gammu.log
# - cd ..
# - cd ..

# GAMMU
# - echo 'Building GAMMU'
# - if [ ${GENERATE_GAMMU} != true ]; then wget -U 'Yadoms/1.0.0' ${YADOMS_DOWNLOAD_URL}/gammu-1.38.1-build.tar.bz2; else wget https://dl.cihar.com/gammu/releases/gammu-1.38.1.tar.bz2; fi
# - if [ ${GENERATE_GAMMU} != true ]; then tar xjf gammu-1.38.1-build.tar.bz2; else tar xjf gammu-1.38.1.tar.bz2; fi
# - cd gammu-1.38.1
# - if [ ${GENERATE_GAMMU} != true ]; then echo "Bypass GAMMU/configure"; else CC=arm-linux-gnueabihf-gcc CXX=arm-linux-gnueabihf-g++ AR=arm-linux-gnueabihf-ar RANLIB=arm-linux-gnueabihf-ranlib ./configure --prefix=$HOME/depsBuild/gammu; fi
# - if [ ${GENERATE_GAMMU} != true ]; then echo "Bypass GAMMU/make"; else make; fi
# - make install
# - cd ..
# - if [ ${GENERATE_GAMMU} = true ]; then tar cjf gammu-1.38.1-build.tar.bz2 gammu-1.38.1; fi
# - if [ ${GENERATE_GAMMU} = true ]; then curl --disable-epsv --ftp-create-dirs -T gammu-1.38.1-build.tar.bz2 -u ${FTP_USER}:${FTP_PASSWORD} ${YADOMS_UPLOAD_URL}/; fi
# - if [ ${GENERATE_GAMMU} = true ]; then rm -f gammu-1.38.1-build.tar.bz2; fi


 # SWIG
- echo 'Building SWIG'
- if [ ${GENERATE_SWIG} != true ]; then wget --no-verbose -U 'Yadoms/1.0.0' ${YADOMS_DOWNLOAD_URL}/swig-3.0.12-build.tar.bz2; else wget --no-verbose http://prdownloads.sourceforge.net/swig/swig-3.0.12.tar.gz; fi
- if [ ${GENERATE_SWIG} != true ]; then tar xjf swig-3.0.12-build.tar.bz2; else tar xzf swig-3.0.12.tar.gz; fi
- cd swig-3.0.12
- if [ ${GENERATE_SWIG} != true ]; then echo "Bypass SWIG/configure"; else ./configure > $HOME/logs/yadoms_swig.log; fi
- if [ ${GENERATE_SWIG} != true ]; then echo "Bypass SWIG/make"; else make > $HOME/logs/yadoms_swig.log; fi
- sudo make install > $HOME/logs/yadoms_swig.log
- cd ..
- if [ ${GENERATE_SWIG} = true ]; then tar cjf swig-3.0.12-build.tar.bz2 swig-3.0.12; fi
- if [ ${GENERATE_SWIG} = true ]; then curl --disable-epsv --ftp-create-dirs -T swig-3.0.12-build.tar.bz2 -u ${FTP_USER}:${FTP_PASSWORD} ${YADOMS_UPLOAD_URL}/; fi
- if [ ${GENERATE_SWIG} = true ]; then rm -f swig-3.0.12-build.tar.bz2; fi

# Python HOST
- sudo apt-get install python-dev
- echo 'Building Python HOST'
- if [ ${GENERATE_PYTHON_HOST} != true ]; then wget -U 'Yadoms/1.0.0' ${YADOMS_DOWNLOAD_URL}/Python-2.7.13-host-build.tar.bz2; else wget https://www.python.org/ftp/python/2.7.13/Python-2.7.13.tgz; fi
- if [ ${GENERATE_PYTHON_HOST} != true ]; then tar xjf Python-2.7.13-host-build.tar.bz2; else tar xzf Python-2.7.13.tgz; fi
- cd Python-2.7.13
- if [ ${GENERATE_PYTHON_HOST} != true ]; then echo "Bypass PYTHON HOST/configure"; else ./configure > $HOME/logs/yadoms_pythonhost.log; fi
- if [ ${GENERATE_PYTHON_HOST} != true ]; then echo "Bypass PYTHON HOST/make"; else make python Parser/pgen > $HOME/logs/yadoms_pythonhost.log; fi
- sudo make install > $HOME/logs/yadoms_pythonhost.log
- mkdir -p $HOME/depsBuild/pythonhost
- cp python $HOME/depsBuild/pythonhost/
- cp Parser/pgen $HOME/depsBuild/pythonhost/
- cd ..
- if [ ${GENERATE_PYTHON_HOST} = true ]; then tar cjf Python-2.7.13-host-build.tar.bz2 Python-2.7.13; fi
- if [ ${GENERATE_PYTHON_HOST} = true ]; then curl --disable-epsv --ftp-create-dirs -T Python-2.7.13-host-build.tar.bz2 -u ${FTP_USER}:${FTP_PASSWORD} ${YADOMS_UPLOAD_URL}/; fi
- if [ ${GENERATE_PYTHON_HOST} = true ]; then rm -f Python-2.7.13-host-build.tar.bz2; fi
- sudo rm -Rf Python-2.7.13

# Python PI
- echo 'Building Python PI'
- if [ ${GENERATE_PYTHON} != true ]; then wget -U 'Yadoms/1.0.0' ${YADOMS_DOWNLOAD_URL}/Python-2.7.13-pi-build.tar.bz2; else wget https://www.python.org/ftp/python/2.7.13/Python-2.7.13.tgz; fi
- if [ ${GENERATE_PYTHON} != true ]; then tar xjf Python-2.7.13-pi-build.tar.bz2; else tar xzf Python-2.7.13.tgz; fi
- cd Python-2.7.13
- if [ ${GENERATE_PYTHON} != true ]; then echo "Bypass PYTHON PI/configure"; else CC=arm-linux-gnueabihf-gcc CXX=arm-linux-gnueabihf-g++ AR=arm-linux-gnueabihf-ar RANLIB=arm-linux-gnueabihf-ranlib ./configure --host=arm-linux-gnueabihf --target=arm-linux-gnueabihf --build=x86_64-linux-gnu --prefix=$HOME/depsBuild/python --disable-ipv6 ac_cv_file__dev_ptmx=no ac_cv_file__dev_ptc=no ac_cv_have_long_long_format=yes --enable-shared > $HOME/logs/yadoms_pythonpi.log; fi
- if [ ${GENERATE_PYTHON} != true ]; then echo "Bypass PYTHON PI/make"; else make HOSTPYTHON=$HOME/depsBuild/pythonhost/python HOSTPGEN=$HOME/depsBuild/pythonhost/pgen BLDSHARED="arm-linux-gnueabihf-cc -shared" CROSS-COMPILE=arm-linux-gnueabihf- CROSS_COMPILE_TARGET=yes HOSTARCH=arm-linux BUILDARCH=arm-linux-gnueabihf > $HOME/logs/yadoms_pythonpi.log; fi
- cd ..
- if [ ${GENERATE_PYTHON} = true ]; then tar cjf Python-2.7.13-pi-build.tar.bz2 Python-2.7.13; fi
- if [ ${GENERATE_PYTHON} = true ]; then curl --disable-epsv --ftp-create-dirs -T Python-2.7.13-pi-build.tar.bz2 -u ${FTP_USER}:${FTP_PASSWORD} ${YADOMS_UPLOAD_URL}/; fi
- if [ ${GENERATE_PYTHON} = true ]; then rm -f Python-2.7.13-pi-build.tar.bz2; fi

#- echo 'Save all depsBuild to ftp'
#- tar cjf depsBuild.tar.bz2 $HOME/depsBuild
#- curl --disable-epsv --ftp-create-dirs -T depsBuild.tar.bz2 -u ${FTP_USER}:${FTP_PASSWORD} ${YADOMS_UPLOAD_URL}/
#- rm -f depsBuild.tar.bz2

# PostgreSQL
- echo 'Building PostgreSQL'
- if [ ${GENERATE_POSTGRESQL} != true ]; then wget -U 'Yadoms/1.0.0' ${YADOMS_DOWNLOAD_URL}/postgresql-9.6.2-build.tar.bz2; else wget https://ftp.postgresql.org/pub/source/v9.6.2/postgresql-9.6.2.tar.bz2; fi
- if [ ${GENERATE_POSTGRESQL} != true ]; then tar xjf postgresql-9.6.2-build.tar.bz2; else tar xjf postgresql-9.6.2.tar.bz2; fi
- cd postgresql-9.6.2
- if [ ${GENERATE_POSTGRESQL} != true ]; then echo "Bypass PostgreSQL/configure"; else CC=arm-linux-gnueabihf-gcc CXX=arm-linux-gnueabihf-g++ AR=arm-linux-gnueabihf-ar RANLIB=arm-linux-gnueabihf-ranlib ./configure --host=arm-linux --build=arm-linux-gnueabihf --without-readline --without-zlib --disable-spinlocks > $HOME/logs/yadoms_postgresql.log; fi
- cd src/interfaces/libpq
- if [ ${GENERATE_POSTGRESQL} != true ]; then echo "Bypass PostgreSQL/make"; else make > $HOME/logs/yadoms_postgresql.log; fi
- cd ../../../..
- if [ ${GENERATE_POSTGRESQL} = true ]; then tar cjf postgresql-9.6.2-build.tar.bz2 postgresql-9.6.2; fi
- if [ ${GENERATE_POSTGRESQL} = true ]; then curl --disable-epsv --ftp-create-dirs -T postgresql-9.6.2-build.tar.bz2 -u ${FTP_USER}:${FTP_PASSWORD} ${YADOMS_UPLOAD_URL}/; fi
- if [ ${GENERATE_POSTGRESQL} = true ]; then rm -f postgresql-9.6.2-build.tar.bz2; fi

#Yadoms sources
- echo 'Downloading yadoms sources'
- git clone --depth=1 -b ${BUILD_BRANCH} git://github.com/Yadoms/yadoms.git 

#Install rpm tools
- sudo apt-get install rpm
- sudo apt-get install zip


script:
# Yadoms configuration file
- echo 'Configuring Yadoms CMakeListsUserConfig.txt'
- echo 'set(ALTERNATIVE_CMAKE_ROOT "'$PWD'/cmake-3.10.2")' > yadoms/sources/CMakeListsUserConfig.txt
- echo 'set(BOOST_ROOT "'$PWD'/boost_1_65_1")' >> yadoms/sources/CMakeListsUserConfig.txt
- echo 'set(POCO_ROOT "'$PWD'/poco-1.8.1-all")' >> yadoms/sources/CMakeListsUserConfig.txt
- echo 'set(PROTOBUF_ROOT "'$HOME'/depsBuild/protobuf")' >> yadoms/sources/CMakeListsUserConfig.txt
- echo 'set(PROTOBUF_PROTOC_EXECUTABLE "'`which protoc`'")' >> yadoms/sources/CMakeListsUserConfig.txt
- echo 'set(PROTOBUF_INSTALLED_TO_CUSTOM_DIRECTORY ON)' >> yadoms/sources/CMakeListsUserConfig.txt
- echo 'set(OPENSSL_ROOT "'$HOME'/depsBuild/openssl")' >> yadoms/sources/CMakeListsUserConfig.txt
- echo 'set(DEBUG_WITH_GCC OFF)' >> yadoms/sources/CMakeListsUserConfig.txt
- echo 'set(PYTHON_USE_PKGCONFIG OFF)' >> yadoms/sources/CMakeListsUserConfig.txt
- echo 'set(PYTHON_USE_SOURCES ON)' >> yadoms/sources/CMakeListsUserConfig.txt
- echo 'set(PYTHON_ROOT "'$PWD'/Python-2.7.13")' >> yadoms/sources/CMakeListsUserConfig.txt
- echo 'set(PYTHON_LIBRARIES "'$PWD'/Python-2.7.13/libpython2.7.so")' >> yadoms/sources/CMakeListsUserConfig.txt
- echo 'set(PostgreSQL_ROOT ' >> yadoms/sources/CMakeListsUserConfig.txt
- echo '       "'$PWD'/postgresql-9.6.2/src/interfaces/libpq"' >> yadoms/sources/CMakeListsUserConfig.txt
- echo '       "'$PWD'/postgresql-9.6.2/src/include")' >> yadoms/sources/CMakeListsUserConfig.txt
#- echo 'set(GAMMU_ROOT "'$PWD'/gammu-1.36.8")' >> yadoms/sources/CMakeListsUserConfig.txt
- echo 'set(SWIG_ROOT "'$PWD'/swig-3.0.12")' >> yadoms/sources/CMakeListsUserConfig.txt
- echo 'SET(COTIRE_USE ON)' >> yadoms/sources/CMakeListsUserConfig.txt
- echo 'SET(COTIRE_USE_UNITY ON)' >> yadoms/sources/CMakeListsUserConfig.txt
- echo 'set(LIBUDEV_ROOT "'$HOME'/depsBuild/libudev")' >> yadoms/sources/CMakeListsUserConfig.txt
- echo 'set(UDEV_PATH_LIB "'$HOME'/depsBuild/libudev")' >> yadoms/sources/CMakeListsUserConfig.txt
- echo 'set(UDEV_PATH_INCLUDES "'$HOME'/depsBuild/libudev")' >> yadoms/sources/CMakeListsUserConfig.txt

- echo 'set(CC_RPI_ROOT "'$PWD'/tools/arm-bcm2708/arm-rpi-4.9.3-linux-gnueabihf")' >> yadoms/sources/CMakeListsUserConfig.txt
- echo 'Result:'
- cat yadoms/sources/CMakeListsUserConfig.txt

# Yadoms
- cd yadoms
- echo 'Generating makefile'
- sh cmake_raspberry.sh r
- echo 'Building Yadoms'
- cd projects
- make all_unity
- cd ..

# Make Package 
- cd projects
- echo 'Building Yadoms Package'
- make package
- cd ..

# Make update package
- mkdir updatepackage
- yadomsVersion=$(grep -oP '###[[:space:]]\K.*' sources/server/changelog.md -m 1)
# Copy script
- cp update/scripts/update.sh updatepackage/update.sh
# Generate package.json
- cp ../package.json.in updatepackage/package.json
- sed -i -- 's/__version__/'$yadomsVersion'/g' updatepackage/package.json
- sed -i -- 's/__gitdate__/'`git log -1 --format=%cI `'/g' updatepackage/package.json
- cp sources/server/changelog.md updatepackage/changelog.md
- mv builds/package packagetomove
- mv builds updatepackage/package
- rm -f updatepackage/package/yadoms.ini
- cd updatepackage
- zip -r ../package.zip ./ -x \*.gitignore
- cd ..
- mkdir builds
- mv packagetomove builds/package
- mv package.zip builds/package

after_failure:  # this will of course run only on failure
# Package logs
- echo 'Package logs'
- cd $HOME
- tar cjf logs.$yadomsVersion.tar.bz2 logs
- curl --disable-epsv --ftp-create-dirs -T logs.$yadomsVersion.tar.bz2 -u ${FTP_USER}:${FTP_PASSWORD} ${YADOMS_UPLOAD_URL}/

after_success: # and this only on success
# Upload packages
- echo 'Upload package'
- curl --disable-epsv --ftp-create-dirs -T "{$(echo builds/package/* | tr ' ' ',')}" -u ${FTP_USER}:${FTP_PASSWORD} ${YADOMS_UPLOAD_URL}/
